[프로젝트명] 학생 과제 제출 및 관리 Streamlit 앱 개발
1. 프로젝트 개요
학생들이 과제를 온라인으로 제출하고, 교수는 제출 현황을 한눈에 파악할 수 있는 간단한 Streamlit 애플리케이션을 제작합니다. 사용자는 '학생'과 '관리자(교수)' 두 가지 역할로 나뉘며, 역할에 따라 다른 기능을 제공합니다. 데이터베이스는 SQLite를 사용하고, 파일은 서버 내 로컬 폴더에 저장합니다.

2. 핵심 기술 스택

언어: Python

프레임워크: Streamlit

데이터베이스: SQLite

3. 필수 기능 및 요구사항

Phase 1: 초기 환경 및 데이터베이스 설정

디렉토리 구조:

app.py: 메인 스트림릿 애플리케이션 파일

storage/: 학생들이 제출한 과제 파일이 저장될 폴더 (초기 생성 필요)

database.db: 모든 데이터를 저장할 SQLite 데이터베이스 파일

데이터베이스 (database.db) 스키마 정의:

students 테이블: 학생 정보

student_id (TEXT, Primary Key): 학번 (예: '20251111')

password (TEXT): 비밀번호 (보안을 위해 해싱하여 저장)

name (TEXT): 이름

email (TEXT): 이메일 주소

professors 테이블: 교수(관리자) 정보

admin_id (TEXT, Primary Key): 관리자 아이디 (예: 'admin1')

password (TEXT): 비밀번호 (보안을 위해 해싱하여 저장)

name (TEXT): 이름

submissions 테이블: 과제 제출 기록

submission_id (INTEGER, Primary Key, Autoincrement): 제출 고유 ID

student_id (TEXT): 제출한 학생의 학번 (Foreign Key)

file_path (TEXT): 서버에 저장된 파일의 실제 경로 (예: 'storage/20251111_report.pdf')

original_filename (TEXT): 학생이 업로드한 원본 파일명

submission_time (DATETIME): 제출 시간

초기 데이터 삽입:

앱 실행 시 데이터베이스 파일과 테이블이 없으면 자동으로 생성하고, 아래 초기 데이터를 삽입합니다.

비밀번호는 '1234'를 해싱(hashlib 라이브러리 사용)하여 저장해야 합니다.

학생 초기 데이터 (3명):

(학번: '20251111', 비밀번호: '1234', 이름: '이국민', 이메일: 'leegukmin@email.com')

(학번: '20252222', 비밀번호: '1234', 이름: '김대학', 이메일: 'kimdaehak@email.com')

(학번: '20253333', 비밀번호: '1234', 이름: '최학생', 이메일: 'choihaksaeng@email.com')

교수 초기 데이터 (3명):

(아이디: 'admin1', 비밀번호: '1234', 이름: '이교수')

(아이디: 'admin2', 비밀번호: '1234', 이름: '김교수')

(아이디: 'admin3', 비밀번호: '1234', 이름: '최교수')

Phase 2: 사용자 인증 (로그인)

역할 선택: 앱의 사이드바(st.sidebar)에 "사용자 역할 선택"이라는 셀렉트박스를 만들고, '학생'과 '관리자' 옵션을 제공합니다.

로그인 폼:

'학생' 선택 시: '학번'과 '비밀번호' 입력 필드를 표시합니다.

'관리자' 선택 시: '아이디'와 '비밀번호' 입력 필드를 표시합니다.

로그인 처리:

로그인 버튼 클릭 시, 입력된 정보를 DB와 비교하여 인증을 수행합니다.

로그인 성공 시, st.session_state를 사용하여 로그인 상태(사용자 아이디, 이름 등)를 유지합니다.

로그인 실패 시, "학번/아이디 또는 비밀번호가 일치하지 않습니다."라는 에러 메시지를 표시합니다.

Phase 3: 학생 기능

로그인 후 화면: 학생으로 로그인 성공 시, 아래 기능들을 보여줍니다.

1. 과제 제출:

st.file_uploader를 사용하여 학생이 과제 파일을 업로드할 수 있게 합니다.

'제출' 버튼 클릭 시, 업로드된 파일을 storage/ 폴더에 저장합니다.

파일명 규칙: 저장 시 파일명은 {학번}_{원본 파일명} 형식으로 합니다. (예: 20251111_my_report.docx)

파일 저장 성공 후, submissions 테이블에 제출 기록(학번, 저장된 파일 경로, 원본 파일명, 제출 시간)을 추가합니다.

2. 제출 내역 확인 및 삭제:

자신이 제출한 과제 목록을 submissions 테이블에서 조회하여 보여줍니다. (표시 정보: 원본 파일명, 제출 시간)

각 제출 내역 옆에 '삭제' 버튼을 추가합니다.

'삭제' 버튼 클릭 시, storage/ 폴더에서 해당 파일을 삭제하고 submissions 테이블에서도 해당 기록을 삭제한 후, 화면을 새로고침하여 목록을 갱신합니다.

Phase 4: 관리자(교수) 기능

로그인 후 화면: 관리자로 로그인 성공 시, "제출 현황 대시보드"를 보여줍니다.

대시보드:

submissions 테이블의 모든 데이터를 조회합니다.

students 테이블과 JOIN하여 학생의 이름 정보까지 함께 가져옵니다.

Pandas DataFrame을 사용하여 st.dataframe으로 전체 제출 목록을 표시합니다.

표시할 컬럼: '학번', '이름', '원본 파일명', '제출 시간'

(선택) 제출 시간을 기준으로 내림차순 정렬하여 가장 최근 제출 내역이 위로 오게 합니다.

4. 코드 구현 가이드라인

코드를 기능별로 함수화하여 가독성과 재사용성을 높여주세요. (예: initialize_database(), handle_student_login(), student_dashboard(), admin_dashboard())

사용자 입력값 처리 및 데이터베이스 쿼리 시 SQL Injection과 같은 보안 취약점을 고려하여 안전하게 코드를 작성해주세요.

각 함수의 역할과 로직에 대해 간략한 주석을 추가해주세요.